// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  ADMIN
  TUTOR
  USER
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  role          Role            @default(USER)
  fullName      String
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Course        Course[]
  UserOnCourse  UserOnCourse[]
  Note          Note[]
  LessonSummary LessonSummary[]
}

model UserOnCourse {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           String         @id @default(cuid())
  title        String
  description  String
  authorId     String
  level        Level
  bgImageUrl   String?
  author       User           @relation(fields: [authorId], references: [id])
  status       Status         @default(DRAFT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Module       Module[]
  TagOnCourse  TagOnCourse[]
  UserOnCourse UserOnCourse[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lesson    Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  overview      String?
  content       String?
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Note          Note[]
  LessonSummary LessonSummary[]
  Quiz          Quiz?
}

model Tag {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TagOnCourse TagOnCourse[]
}

model TagOnCourse {
  id        String   @id @default(cuid())
  courseId  String
  tagId     String
  course    Course   @relation(fields: [courseId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id           String   @id @default(cuid())
  note         String
  originalText String
  from         String
  to           String
  userId       String
  lessonId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  lesson       Lesson   @relation(fields: [lessonId], references: [id])
}

model LessonSummary {
  id        String   @id @default(cuid())
  lessonId  String
  userId    String
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Quiz {
  id        String          @id @default(cuid())
  lessonId  String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  lesson    Lesson          @relation(fields: [lessonId], references: [id])
  content   Quiz_Question[]
}

model Quiz_Question {
  id        String   @id @default(cuid())
  question  String
  answer    String
  quizId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}
